// Generador inteligente de c√≥digos para lotes y pallets
// Cumple con normativas SAG Chile y est√°ndares internacionales

import { supabase } from '../lib/supabase'

export interface ResultadoGeneracion {
  codigo: string
  tipo: 'lote' | 'pallet'
  valido: boolean
  secuencial: number
  a√±o: number
  errores: string[]
  mensaje?: string
}

export interface OpcionesGeneracion {
  a√±o?: number
}

class CodigoGeneradorInteligente {
  private readonly LIMITE_PALLET = 99999
  private readonly LIMITE_LOTE = 999

  /**
   * Genera el pr√≥ximo c√≥digo de pallet √∫nico, verificando base de datos
   */
  async generarProximoPallet(opciones: OpcionesGeneracion = {}): Promise<ResultadoGeneracion> {
    try {
      const a√±o = opciones.a√±o || new Date().getFullYear()
      
      // Verificar l√≠mite
      if (a√±o < 2020 || a√±o > 2100) {
        throw new Error(`A√±o inv√°lido: ${a√±o}`)
      }
      
      // Obtener √∫ltimo secuencial desde la base de datos
      const ultimoSecuencial = await this.obtenerUltimoSecuencialPalletDB(a√±o)
      
      // Calcular siguiente
      const siguienteSecuencial = ultimoSecuencial + 1
      
      // Verificar l√≠mite
      if (siguienteSecuencial > this.LIMITE_PALLET) {
        throw new Error(`Se alcanz√≥ el l√≠mite m√°ximo de pallets para el a√±o ${a√±o} (${this.LIMITE_PALLET.toLocaleString()})`)
      }
      
      const codigo = `PAL-${a√±o}-CHIL-${siguienteSecuencial.toString().padStart(5, '0')}`
      
      // Verificar que no existe duplicado (doble verificaci√≥n)
      const existe = await this.verificarCodigoExiste(codigo)
      if (existe) {
        console.warn(`‚ö†Ô∏è C√≥digo ${codigo} ya existe, regenerando...`)
        // Forzar siguiente secuencial
        return this.generarProximoPallet({ a√±o: a√±o })
      }
      
      return {
        codigo,
        tipo: 'pallet',
        valido: true,
        secuencial: siguienteSecuencial,
        a√±o,
        errores: [],
        mensaje: `C√≥digo generado exitosamente. Secuencial: ${siguienteSecuencial}`
      }
    } catch (error) {
      console.error('Error generando c√≥digo de pallet:', error)
      return {
        codigo: '',
        tipo: 'pallet',
        valido: false,
        secuencial: 0,
        a√±o: opciones.a√±o || new Date().getFullYear(),
        errores: [error instanceof Error ? error.message : 'Error desconocido'],
        mensaje: 'No se pudo generar el c√≥digo de pallet'
      }
    }
  }

  /**
   * Genera el pr√≥ximo c√≥digo de lote √∫nico
   */
  async generarProximoLote(opciones: OpcionesGeneracion = {}): Promise<ResultadoGeneracion> {
    try {
      const a√±o = opciones.a√±o || new Date().getFullYear()
      
      // Obtener √∫ltimo secuencial desde la base de datos
      const ultimoSecuencial = await this.obtenerUltimoSecuencialLoteDB(a√±o)
      
      // Calcular siguiente
      const siguienteSecuencial = ultimoSecuencial + 1
      
      // Verificar l√≠mite
      if (siguienteSecuencial > this.LIMITE_LOTE) {
        throw new Error(`Se alcanz√≥ el l√≠mite m√°ximo de lotes para el a√±o ${a√±o} (${this.LIMITE_LOTE})`)
      }
      
      const codigo = `LP-${a√±o}-CHIL-${siguienteSecuencial.toString().padStart(3, '0')}`
      
      return {
        codigo,
        tipo: 'lote',
        valido: true,
        secuencial: siguienteSecuencial,
        a√±o,
        errores: [],
        mensaje: `C√≥digo generado exitosamente. Secuencial: ${siguienteSecuencial}`
      }
    } catch (error) {
      console.error('Error generando c√≥digo de lote:', error)
      return {
        codigo: '',
        tipo: 'lote',
        valido: false,
        secuencial: 0,
        a√±o: opciones.a√±o || new Date().getFullYear(),
        errores: [error instanceof Error ? error.message : 'Error desconocido'],
        mensaje: 'No se pudo generar el c√≥digo de lote'
      }
    }
  }

  /**
   * Obtiene el √∫ltimo secuencial de pallet desde la base de datos
   */
  private async obtenerUltimoSecuencialPalletDB(a√±o: number): Promise<number> {
    try {
      const { data, error } = await supabase
        .from('pallets')
        .select('codigo_pallet')
        .like('codigo_pallet', `PAL-${a√±o}-CHIL-%`)
        .order('codigo_pallet', { ascending: false })
        .limit(1)
        .single()
      
      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found
        console.warn('Error consultando √∫ltimos pallets:', error)
        return this.obtenerUltimoSecuencialPalletFallback(a√±o)
      }
      
      if (!data) {
        console.log(`üéØ No hay pallets para el a√±o ${a√±o}, comenzando desde 0`)
        return 0
      }
      
      // Extraer secuencial del c√≥digo
      const match = data.codigo_pallet.match(/PAL-\d{4}-CHIL-(\d{5})$/)
      if (!match) {
        console.warn('Formato de c√≥digo inv√°lido:', data.codigo_pallet)
        return this.obtenerUltimoSecuencialPalletFallback(a√±o)
      }
      
      const secuencial = parseInt(match[1])
      console.log(`üìä √öltimo pallet ${a√±o}: ${data.codigo_pallet} (secuencial: ${secuencial})`)
      return secuencial
      
    } catch (error) {
      console.warn('Error obteniendo √∫ltimo secuencial de pallet desde BD:', error)
      return this.obtenerUltimoSecuencialPalletFallback(a√±o)
    }
  }

  /**
   * Obtiene el √∫ltimo secuencial de lote desde la base de datos
   */
  private async obtenerUltimoSecuencialLoteDB(a√±o: number): Promise<number> {
    try {
      const { data, error } = await supabase
        .from('lotes')
        .select('id')
        .like('id', `LP-${a√±o}-CHIL-%`)
        .order('id', { ascending: false })
        .limit(1)
        .single()
      
      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows found
        console.warn('Error consultando √∫ltimos lotes:', error)
        return this.obtenerUltimoSecuencialLoteFallback(a√±o)
      }
      
      if (!data) {
        console.log(`üéØ No hay lotes para el a√±o ${a√±o}, comenzando desde 0`)
        return 0
      }
      
      // Extraer secuencial del c√≥digo
      const match = data.id.match(/LP-\d{4}-CHIL-(\d{3})$/)
      if (!match) {
        console.warn('Formato de c√≥digo de lote inv√°lido:', data.id)
        return this.obtenerUltimoSecuencialLoteFallback(a√±o)
      }
      
      const secuencial = parseInt(match[1])
      console.log(`üìä √öltimo lote ${a√±o}: ${data.id} (secuencial: ${secuencial})`)
      return secuencial
      
    } catch (error) {
      console.warn('Error obteniendo √∫ltimo secuencial de lote desde BD:', error)
      return this.obtenerUltimoSecuencialLoteFallback(a√±o)
    }
  }

  /**
   * Verifica si un c√≥digo ya existe en la base de datos
   */
  private async verificarCodigoExiste(codigo: string): Promise<boolean> {
    try {
      if (codigo.startsWith('PAL-')) {
        const { data, error } = await supabase
          .from('pallets')
          .select('codigo_pallet')
          .eq('codigo_pallet', codigo)
          .single()
        
        return !error && !!data
      } else if (codigo.startsWith('LP-')) {
        const { data, error } = await supabase
          .from('lotes')
          .select('id')
          .eq('id', codigo)
          .single()
        
        return !error && !!data
      }
      
      return false
    } catch (error) {
      console.warn('Error verificando existencia de c√≥digo:', error)
      return false // Asumir que no existe para no bloquear operaci√≥n
    }
  }

  /**
   * Fallback a localStorage si falla la consulta a BD
   */
  private obtenerUltimoSecuencialPalletFallback(a√±o: number): number {
    try {
      const key = `ultimo_pallet_${a√±o}`
      const storedValue = localStorage.getItem(key)
      const valor = storedValue ? parseInt(storedValue) : 0
      
      if (isNaN(valor)) {
        console.warn(`Valor de localStorage inv√°lido para ${key}:`, storedValue)
        return 0
      }
      
      console.log(`üîÑ Usando fallback localStorage para pallets ${a√±o}: ${valor}`)
      return valor
    } catch (error) {
      console.warn('Error en fallback localStorage para pallets:', error)
      return 0
    }
  }

  /**
   * Fallback a localStorage si falla la consulta a BD para lotes
   */
  private obtenerUltimoSecuencialLoteFallback(a√±o: number): number {
    try {
      const key = `ultimo_lote_${a√±o}`
      const storedValue = localStorage.getItem(key)
      const valor = storedValue ? parseInt(storedValue) : 0
      
      if (isNaN(valor)) {
        console.warn(`Valor de localStorage inv√°lido para ${key}:`, storedValue)
        return 0
      }
      
      console.log(`üîÑ Usando fallback localStorage para lotes ${a√±o}: ${valor}`)
      return valor
    } catch (error) {
      console.warn('Error en fallback localStorage para lotes:', error)
      return 0
    }
  }

  /**
   * Actualiza el contador en localStorage (para compatibilidad)
   */
  async actualizarContador(codigo: string): Promise<void> {
    try {
      const match = codigo.match(/(PAL|LP)-(\d{4})-CHIL-(\d{3,5})$/)
      if (!match) return
      
      const [, tipo, a√±o, secuencialStr] = match
      const secuencial = parseInt(secuencialStr)
      
      if (tipo === 'PAL') {
        localStorage.setItem(`ultimo_pallet_${a√±o}`, secuencial.toString())
        console.log(`‚úÖ Contador pallet ${a√±o} actualizado: ${secuencial}`)
      } else if (tipo === 'LP') {
        localStorage.setItem(`ultimo_lote_${a√±o}`, secuencial.toString())
        console.log(`‚úÖ Contador lote ${a√±o} actualizado: ${secuencial}`)
      }
    } catch (error) {
      console.warn('Error actualizando contador:', error)
    }
  }
}

// Instancia singleton
export const codigoGenerator = new CodigoGeneradorInteligente()

// Funciones p√∫blicas para compatibilidad
export const generarProximoPallet = (opciones?: OpcionesGeneracion) => 
  codigoGenerator.generarProximoPallet(opciones)

export const generarProximoLote = (opciones?: OpcionesGeneracion) => 
  codigoGenerator.generarProximoLote(opciones)

/**
 * Valida y normaliza c√≥digos de lote y pallet
 */
export function validarCodigo(codigo: string): ResultadoGeneracion {
  const codigoLimpio = codigo.trim().toUpperCase()
  
  // Intentar normalizar c√≥digos parciales
  const normalizado = normalizarCodigo(codigoLimpio)
  
  // Validar formato de pallet
  const palletMatch = normalizado.match(/^PAL-(\d{4})-CHIL-(\d{5})$/)
  if (palletMatch) {
    const [, a√±o, secuencial] = palletMatch
    return {
      codigo: normalizado,
      tipo: 'pallet',
      valido: true,
      secuencial: parseInt(secuencial),
      a√±o: parseInt(a√±o),
      errores: [],
      mensaje: 'C√≥digo de pallet v√°lido'
    }
  }
  
  // Validar formato de lote
  const loteMatch = normalizado.match(/^LP-(\d{4})-CHIL-(\d{3})$/)
  if (loteMatch) {
    const [, a√±o, secuencial] = loteMatch
    return {
      codigo: normalizado,
      tipo: 'lote',
      valido: true,
      secuencial: parseInt(secuencial),
      a√±o: parseInt(a√±o),
      errores: [],
      mensaje: 'C√≥digo de lote v√°lido'
    }
  }
  
  // C√≥digo inv√°lido
  const errores = ['Formato de c√≥digo inv√°lido']
  if (!normalizado.includes('CHIL')) {
    errores.push('Debe contener CHIL para c√≥digos chilenos')
  }
  if (!normalizado.match(/\d{4}/)) {
    errores.push('Debe contener un a√±o de 4 d√≠gitos')
  }
  
  return {
    codigo: '',
    tipo: 'pallet', // Default
    valido: false,
    secuencial: 0,
    a√±o: new Date().getFullYear(),
    errores,
    mensaje: 'C√≥digo inv√°lido'
  }
}

/**
 * Normaliza c√≥digos parciales a formato completo
 */
function normalizarCodigo(codigo: string): string {
  // PAL20250001 -> PAL-2025-CHIL-00001
  if (/^PAL\d{8}$/.test(codigo)) {
    const a√±o = codigo.substring(3, 7)
    const secuencial = codigo.substring(7).padStart(5, '0')
    return `PAL-${a√±o}-CHIL-${secuencial}`
  }
  
  // PAL-2025-1 -> PAL-2025-CHIL-00001
  if (/^PAL-\d{4}-\d{1,5}$/.test(codigo)) {
    const parts = codigo.split('-')
    const secuencial = parts[2].padStart(5, '0')
    return `PAL-${parts[1]}-CHIL-${secuencial}`
  }
  
  // P20251234 -> PAL-2025-CHIL-01234
  if (/^P\d{8}$/.test(codigo)) {
    const a√±o = codigo.substring(1, 5)
    const secuencial = codigo.substring(5).padStart(5, '0')
    return `PAL-${a√±o}-CHIL-${secuencial}`
  }
  
  // Casos similares para lotes...
  if (/^LP\d{7}$/.test(codigo)) {
    const a√±o = codigo.substring(2, 6)
    const secuencial = codigo.substring(6).padStart(3, '0')
    return `LP-${a√±o}-CHIL-${secuencial}`
  }
  
  return codigo
}

/**
 * Genera sugerencias de c√≥digos seg√∫n el contexto
 */
export async function generarSugerencias(opciones: {
  tipoEvento?: string
  a√±oActual?: number
}): Promise<string[]> {
  const a√±o = opciones.a√±oActual || new Date().getFullYear()
  
  if (opciones.tipoEvento === 'Paletizado') {
    const resultado = await generarProximoPallet({ a√±o })
    return resultado.valido ? [resultado.codigo] : []
  }
  
  if (opciones.tipoEvento === 'Inicio Cosecha') {
    const resultado = await generarProximoLote({ a√±o })
    return resultado.valido ? [resultado.codigo] : []
  }
  
  // Sugerencias generales
  const sugerencias = []
  const lote = await generarProximoLote({ a√±o })
  const pallet = await generarProximoPallet({ a√±o })
  
  if (lote.valido) sugerencias.push(lote.codigo)
  if (pallet.valido) sugerencias.push(pallet.codigo)
  
  return sugerencias
} 